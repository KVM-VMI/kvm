Make sure you take the necessary steps to prevent data loss!

Build instructions
==================

Kernel
------

For convenience, there are two defconfig files, tested with Ubuntu 16.04
(with a non-LVM root partition).

Use the 'make host_defconfig' command before building the host kernel.
It can boot ext4 root file-systems and run under VMware hypervisor.  You
should boot this kernel on a real system or under hypervisor supporting
nested virtualization. The following build instructions will be done
easier on this system, as long as the compiler and the dependencies
needed by QEMU are installed.

QEMU
----

Regardless of how you will run the introspection tool, you need a custom
QEMU (the kvmi branch - https://github.com/KVM-VMI/qemu/tree/kvmi). Make
sure the configure script 'selects' the vsock support (if you're planning
to run the introspection tool in another VM).

Introspection tool
------------------

Just run 'make' in this directory. It will build a simple introspection
tool (kvmi-test) and a wrapper over the KVMI API (libkvmi.so).

Testing
=======

You will need a VM image that can be started by QEMU (the introspected
VM). We've tested it with Windows 7 x64 SP1 (English) with a single vCPU.

Run the introspection tool on host
----------------------------------

Start the introspection tool:

	LD_LIBRARY_PATH=./ ./kvmi-test /tmp/introspector

By default, it will run for 10 minutes and exit.
Meanwhile, in another terminal, run the VM prepared for introspection
with four additional options:

	qemu-system-x86_64 ... \
		-chardev socket,path=/tmp/introspector,id=chardev0,reconnect=10 \
		-object secret,id=key0,data=some \
		-object introspection,id=kvmi,chardev=chardev0,key=key0 \
		-accel kvm,introspection=kvmi

QEMU will connect to the introspector, pass the file descriptor to
the host kernel through /dev/kvm and boot the VM. You should see the
introspected events printed by the kvmi-test program. When QEMU stops,
kvmi-test will detect that the connection was closed and it will exit.

Run the introspection tool in another VM (sva_defconfig)
--------------------------------------------------------

Use the 'make sva_defconfig' command before building the kernel for this
new Linux VM. When you start this VM use an additional QEMU option:

	qemu-system-x86_64 ... \
		-device vhost-vsock-pci,id=vhost-vsock-pci0,guest-cid=3

Make sure the QEMU process has write access to /dev/vhost-vsock.

Copy kvmi-test and libkvmi.so to this new VM and run the kvmi-test program:

	LD_LIBRARY_PATH=./ ./kvmi-test 1234

Make sure that the program has write access to /dev/vsock.

While the kvmi-test program is running, start the introspected VM from host
with four additional options:

	qemu-system-x86_64 ... \
		-chardev socket,id=chardev0,cid=3,port=1234,reconnect=10 \
		-object secret,id=key0,data=some \
		-object introspection,id=kvmi,chardev=chardev0,key=key0 \
		-accel kvm,introspection=kvmi
